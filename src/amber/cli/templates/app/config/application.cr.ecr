require "./initializers/**"
require "amber"
require "../src/controllers/application_controller"
require "../src/controllers/**"

# About Application.cr File
#
# This is Amber application entry point. This file is responsible for loading
# initializers, classes and and all application related code in order to have
# Amber::Server boot up.
#
# > We recommend to not modify the order of the require since the order will 
# affect the behavior of the application.
#
# With Amber::Server.configure block you can redefine the Server configuration
# settings and use ENVIRONMENT variables.
#
#
Amber::Server.configure do |settings|
  # Use your environment variables settings here.
  #
  # Name: A name that identifies this application this is not internally 
  # used by the framework.
  #
  # settings.name = "<%= display_name %> web application."
  #
  #
  # Colorize Logging: specifies whether or not to use ANSI color codes
  # when logging information. Defaults to true.
  #
  # settings.colorize_logging = true
  #
  #
  # Secret Key Base: is used for specifying a key which allows sessions
  # for the application to be verified against a known secure key to 
  # prevent tampering. Applications get settings.secret_key_base 
  # initialized to a random key present in ENV["AMBER_SECRET_KEY"] or 
  # .amber_secret_key in this order
  #
  # settings.secret_key_base= ENV["SECRET_KEY_BASE"]
  #
  #
  # Host: is the application server host address or ip. Useful for when 
  # deploying Amber to a PAAS when likely the assigned server IP is 
  # known or unknown.
  #
  # settings.host = ENV["HOST"]
  #
  #
  # Port Reuse: Amber supports a clustering mode that allows to spin 
  # multiple instances per core. This setting allows to bind the different 
  # instances to the same port. Default to true if the number or process
  # is grater than 1. See https://lwn.net/Articles/542629/
  #
  # settings.port_reuse = ENV["PORT_REUSE"]
  #
  #
  # Process Count: This will enable Amber to be used in cluster mode, 
  # spinning an instance for each number of process specified here.
  # Rule of thumb, always leave at least 1 core available for system processes
  #
  # settings.port = (ENV["PORT"] ||= 80).to_i
  #
  #
  # Redis URL: this is the redis database server url. Amber utilizes redis as 
  # a storing option for session information.
  #
  # settings.redis_url = ENV["redis_url"] 
  #
  #
  # Database URL: This is the database connection string or data file url. 
  # The connection string contains the information that the provider need to 
  # know to be able to establish a connection to the database or the data file.
  # Defaults to the database provider you chose at
  # at app generation.
  #
  # settings.database_url = ENV["database_url"]
  #
  #
  # SSL Key File: The private key is a text file used initially to generate a 
  # Certificate Signing Request (CSR), and later to secure and verify connections 
  # using the certificate created per that request. The private key is used to create 
  # a digital signature as you might imagine from the name, the private key should be 
  # ``closely guarded.
  #
  # settings.ssl_key_file = ENV["SSL_KEY_FILE"]
  #
  #
  # SSL Cert File: This represents the signed certificate file. SSL Certificates are
  # small data files that digitally bind a cryptographic key to an organization's 
  # details. When installed on a web server, it activates the padlock and the https 
  # protocol and allows secure connections from a web server to a browser.
  #
  # settings.ssl_cert_file  = ENV["SSL_CERT_FILE"]
  # 
  # 
  # Session: A Hash that specifies the session storage mechanism, expiration and key to be used 
  # for the application. The `key` specifies the name of the cookie to be used defaults to 
  # "amber.session". The store can be "encrypted_cookie", "signed_cookie" or "redis". Expires
  # when set to 0 means this is indefinitely and is expressed in seconds.
  #
  # settings.session = { "key" => "amber.session", "store" => "signed_cookie", "expires" => 0 }
  #
  #
  # Log: is the logger that will be used for Amber and it defaults to ::Logger.new(STDOUT). 
  # You can supply a custom logger
  #
  # settings.log = ::Logger.new(STDOUT)
  #
  #
  # Log Level defines the verbosity of the Amber logger. This option defaults to
  # :debug for all environments. The available log levels are: :debug, :info, :warn,
  # :error, :fatal, and :unknown.
  settings.log.level        = ::Logger::INFO
end
